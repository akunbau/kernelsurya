name: Build Kernel with Prebuilt Clang

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bc bison flex libssl-dev libncurses-dev \
            build-essential wget git python3 \
            libelf-dev zip curl ccache \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi
            
      - name: Clone prebuilt Clang
        run: |
          git clone --depth=1 https://github.com/ekqiplur/clangapan.git clang
        # git clone --depth=1 https://github.com/ekqiplur/calang-clang.git clang

      - name: Set Toolchain PATH and Symlink LD
        run: |
          # Direktori bin dari toolchain prebuilt Anda
          # Sesuaikan 'clang-prebuilt' jika nama direktori Anda berbeda
          TOOLCHAIN_BIN_DIR="PATH="$GITHUB_WORKSPACE/clang/bin:$PATH"" 
          echo "PATH=${TOOLCHAIN_BIN_DIR}:$PATH" >> $GITHUB_ENV
          
          # Verifikasi bahwa lld ada di PATH sebelum membuat symlink
          if ! command -v lld &> /dev/null
          then
              echo "Error: 'lld' not found in PATH. Please ensure your prebuilt toolchain includes lld and its bin directory is correctly set in PATH."
              exit 1
          fi

          # *** LANGKAH PENTING: BUAT SYMLINK ***
          # Buat symlink aarch64-linux-gnu-ld ke lld di dalam direktori bin toolchain Anda
          ln -sf "$(which lld)" "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-ld"
          ln -sf "$(which lld)" "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-ld" # Untuk ARM32 juga, jika diperlukan

          # Opsional: Verifikasi symlink sudah terbuat
          ls -l "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-ld"
          ls -l "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-ld"

          # Verifikasi bahwa compiler dapat ditemukan (optional, untuk debug)
          clang --version
          aarch64-linux-gnu-clang --version
          arm-linux-gnueabi-clang --version
        

      - name: Build kernel with Clang
        run: |
          export ARCH=arm64
          export PATH="$GITHUB_WORKSPACE/clang/bin:$PATH"
          export CC=clang
          export LD=ld.lld
          export HOSTLD=ld.lld
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          rm -rf out
          make O=out ARCH=arm64 surya_defconfig
          make -j$(nproc) O=out ARCH=arm64 CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_COMPAT=$CROSS_COMPILE_COMPAT \
            V=1
            
      - name: Clone AnyKernel3
        run: |
          git clone https://github.com/ekqiplur/AnyKernel3.git anykernel
      - name: Package kernel with AnyKernel3
        run: |
          ZIP_NAME="KerNullException-$(date '+%Y%m%d-%H%M').zip"
          cp out/arch/arm64/boot/Image anykernel/
          mkdir -p anykernel/dtb
          cp out/arch/arm64/boot/dts/qcom/*.dtb anykernel/dtb/
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img anykernel/
          else
            echo "Warning: dtbo.img not found. Skipping copy."
          fi
          rm -rf anykernel/ramdisk 
          rm -rf anykernel/patch  
          rm -rf anykernel/modules 
          cd anykernel
          zip -r9 ../${ZIP_NAME} ./*
      - name: Upload flashable kernel zip
        uses: actions/upload-artifact@v4
        with:
          name: flashable-kernel
          path: ${ZIP_NAME}

      - name: Send flashable kernel to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          DYNAMIC_ZIP_NAME="KerNullException-$(date '+%Y%m%d-%H%M').zip"
          curl -F document=@./${DYNAMIC_ZIP_NAME} \
               -F chat_id=$CHAT_ID \
               -F caption="âœ… Build selesai! Ini kernel flashable terbaru." \
               https://api.telegram.org/bot$BOT_TOKEN/sendDocument
